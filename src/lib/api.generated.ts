/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/my/{name}/action/move": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Action Move
     * @description Moves a character on the map using the map's X and Y position.
     */
    post: operations["action_move_my__name__action_move_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/{name}/action/equip": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Action Equip Item
     * @description Equip an item on your character.
     */
    post: operations["action_equip_item_my__name__action_equip_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/{name}/action/unequip": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Action Unequip Item
     * @description Unequip an item on your character.
     */
    post: operations["action_unequip_item_my__name__action_unequip_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/{name}/action/fight": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Action Fight
     * @description Start a fight against a monster on the character's map.
     */
    post: operations["action_fight_my__name__action_fight_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/{name}/action/gathering": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Action Gathering
     * @description Harvest a resource on the character's map.
     */
    post: operations["action_gathering_my__name__action_gathering_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/{name}/action/crafting": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Action Crafting
     * @description Crafting an item. The character must be on a map with a workshop.
     */
    post: operations["action_crafting_my__name__action_crafting_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/{name}/action/bank/deposit": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Action Deposit Bank
     * @description Deposit an item in a bank on the character's map.
     */
    post: operations["action_deposit_bank_my__name__action_bank_deposit_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/{name}/action/bank/deposit/gold": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Action Deposit Bank Gold
     * @description Deposit golds in a bank on the character's map.
     */
    post: operations["action_deposit_bank_gold_my__name__action_bank_deposit_gold_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/{name}/action/recycling": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Action Recycling
     * @description Recyling an item. The character must be on a map with a workshop (only for equipments and weapons).
     */
    post: operations["action_recycling_my__name__action_recycling_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/{name}/action/bank/withdraw": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Action Withdraw Bank
     * @description Take an item from your bank and put it in the character's inventory.
     */
    post: operations["action_withdraw_bank_my__name__action_bank_withdraw_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/{name}/action/bank/withdraw/gold": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Action Withdraw Bank Gold
     * @description Withdraw gold from your bank.
     */
    post: operations["action_withdraw_bank_gold_my__name__action_bank_withdraw_gold_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/{name}/action/ge/buy": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Action Ge Buy Item
     * @description Buy an item at the Grand Exchange on the character's map.
     */
    post: operations["action_ge_buy_item_my__name__action_ge_buy_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/{name}/action/ge/sell": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Action Ge Sell Item
     * @description Sell an item at the Grand Exchange on the character's map.
     */
    post: operations["action_ge_sell_item_my__name__action_ge_sell_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/{name}/action/bank/buy_expansion": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Action Buy Bank Expansion
     * @description Buy a 20 slots bank expansion.
     */
    post: operations["action_buy_bank_expansion_my__name__action_bank_buy_expansion_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/{name}/action/task/new": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Action Accept New Task
     * @description Accepting a new task.
     */
    post: operations["action_accept_new_task_my__name__action_task_new_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/{name}/action/task/complete": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Action Complete Task
     * @description Complete a task.
     */
    post: operations["action_complete_task_my__name__action_task_complete_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/{name}/action/task/exchange": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Action Task Exchange
     * @description Exchange 6 tasks coins for a random reward. Rewards are exclusive items or resources.
     */
    post: operations["action_task_exchange_my__name__action_task_exchange_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/{name}/action/task/trade": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Action Task Trade
     * @description Trading items with a Tasks Master.
     */
    post: operations["action_task_trade_my__name__action_task_trade_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/{name}/action/task/cancel": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Action Task Cancel
     * @description Cancel a task for 1 tasks coin.
     */
    post: operations["action_task_cancel_my__name__action_task_cancel_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/{name}/action/delete": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Action Delete Item
     * @description Delete an item from your character's inventory.
     */
    post: operations["action_delete_item_my__name__action_delete_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/logs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get All Characters Logs
     * @description History of the last 100 actions of all your characters.
     */
    get: operations["get_all_characters_logs_my_logs_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/characters": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get My Characters
     * @description List of your characters.
     */
    get: operations["get_my_characters_my_characters_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/bank": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Bank Details
     * @description Fetch bank details.
     */
    get: operations["get_bank_details_my_bank_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/bank/items": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Bank Items
     * @description Fetch all items in your bank.
     */
    get: operations["get_bank_items_my_bank_items_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my/change_password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Change Password
     * @description Change your account password. Changing the password reset the account token.
     */
    post: operations["change_password_my_change_password_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/characters/create": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create Character
     * @description Create new character on your account. You can create up to 5 characters.
     */
    post: operations["create_character_characters_create_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/characters/delete": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Delete Character
     * @description Delete character on your account.
     */
    post: operations["delete_character_characters_delete_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/characters": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get All Characters
     * @description Fetch characters details.
     */
    get: operations["get_all_characters_characters_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/characters/{name}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Character
     * @description Retrieve the details of a character.
     */
    get: operations["get_character_characters__name__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/characters/{name}/achievements": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Character Achievements
     * @description Retrieve the details of a character.
     */
    get: operations["get_character_achievements_characters__name__achievements_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/maps": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get All Maps
     * @description Fetch maps details.
     */
    get: operations["get_all_maps_maps_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/maps/{x}/{y}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Map
     * @description Retrieve the details of a map.
     */
    get: operations["get_map_maps__x___y__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/items": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get All Items
     * @description Fetch items details.
     */
    get: operations["get_all_items_items_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/items/{code}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Item
     * @description Retrieve the details of a item.
     */
    get: operations["get_item_items__code__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/monsters": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get All Monsters
     * @description Fetch monsters details.
     */
    get: operations["get_all_monsters_monsters_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/monsters/{code}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Monster
     * @description Retrieve the details of a monster.
     */
    get: operations["get_monster_monsters__code__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/resources": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get All Resources
     * @description Fetch resources details.
     */
    get: operations["get_all_resources_resources_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/resources/{code}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Resource
     * @description Retrieve the details of a resource.
     */
    get: operations["get_resource_resources__code__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/events": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get All Events
     * @description Fetch events details.
     */
    get: operations["get_all_events_events_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ge": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get All Ge Items
     * @description Fetch Grand Exchange items details.
     */
    get: operations["get_all_ge_items_ge_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ge/{code}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Ge Item
     * @description Retrieve the details of a Grand Exchange item.
     */
    get: operations["get_ge_item_ge__code__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tasks/list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get All Tasks
     * @description Fetch the list of all tasks.
     */
    get: operations["get_all_tasks_tasks_list_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tasks/list/{code}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Task
     * @description Retrieve the details of a task.
     */
    get: operations["get_task_tasks_list__code__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tasks/rewards": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get All Tasks Rewards
     * @description Fetch the list of all tasks rewards. To obtain these rewards, you must exchange 6 task coins with a tasks master.
     */
    get: operations["get_all_tasks_rewards_tasks_rewards_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tasks/rewards/{code}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Tasks Reward
     * @description Retrieve the details of a tasks reward.
     */
    get: operations["get_tasks_reward_tasks_rewards__code__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/achievements": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get All Achievements
     * @description List of all achievements.
     */
    get: operations["get_all_achievements_achievements_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/achievements/{code}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Achievement
     * @description Retrieve the details of a achievement.
     */
    get: operations["get_achievement_achievements__code__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/leaderboard": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Leaderboard
     * @description Fetch leaderboard details.
     */
    get: operations["get_leaderboard_leaderboard_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/accounts/create": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create Account
     * @description Create an account.
     */
    post: operations["create_account_accounts_create_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/token": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Generate Token
     * @description Use your account as HTTPBasic Auth to generate your token to use the API. You can also generate your token directly on the website.
     */
    post: operations["generate_token_token_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Status
     * @description Return the status of the game server.
     */
    get: operations["get_status__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** AchievementSchema */
    AchievementSchema: {
      /**
       * Name
       * @description Name of the achievement.
       */
      name: string;
      /**
       * Code
       * @description Code of the achievement.
       */
      code: string;
      /**
       * Description
       * @description Description of the achievement.
       */
      description: string;
      /**
       * Points
       * @description Points of the achievement. Used for the leaderboard.
       */
      points: number;
      /**
       * Type
       * @description Type of achievement.
       * @enum {string}
       */
      type: "combat_kill" | "combat_drop" | "combat_level" | "gathering" | "crafting" | "recycling" | "task" | "other";
      /**
       * Target
       * @description Target of the achievement.
       */
      target: string | null;
      /**
       * Total
       * @description Total to do.
       */
      total: number;
      /**
       * Current
       * @description Current progress.
       */
      current: number;
      /**
       * Completed At
       * @description Completed at.
       */
      completed_at: string | null;
    };
    /** ActiveEventSchema */
    ActiveEventSchema: {
      /**
       * Name
       * @description Name of the event.
       */
      name: string;
      /** @description Map of the event. */
      map: components["schemas"]["MapSchema"];
      /**
       * Previous Skin
       * @description Previous map skin.
       */
      previous_skin: string;
      /**
       * Duration
       * @description Duration in minutes.
       */
      duration: number;
      /**
       * Expiration
       * Format: date-time
       * @description Expiration datetime.
       */
      expiration: string;
      /**
       * Created At
       * Format: date-time
       * @description Start datetime.
       */
      created_at: string;
    };
    /** AddAccountSchema */
    AddAccountSchema: {
      /**
       * Username
       * @description Your desired username.
       */
      username: string;
      /**
       * Password
       * @description Your password.
       */
      password: string;
      /**
       * Email
       * Format: email
       * @description Your email.
       */
      email: string;
    };
    /** AddCharacterSchema */
    AddCharacterSchema: {
      /**
       * Name
       * @description Your desired character name. It's unique and all players can see it.
       */
      name: string;
      /**
       * Skin
       * @description Your desired skin.
       * @enum {string}
       */
      skin: "men1" | "men2" | "men3" | "women1" | "women2" | "women3";
    };
    /** AnnouncementSchema */
    AnnouncementSchema: {
      /**
       * Message
       * @description Announcement text.
       */
      message: string;
      /**
       * Created At
       * Format: date-time
       * @description Datetime of the announcement.
       */
      created_at?: string;
    };
    /** BankExtensionSchema */
    BankExtensionSchema: {
      /**
       * Price
       * @description Price of the bank extension.
       */
      price: number;
    };
    /** BankExtensionTransactionResponseSchema */
    BankExtensionTransactionResponseSchema: {
      data: components["schemas"]["BankExtensionTransactionSchema"];
    };
    /** BankExtensionTransactionSchema */
    BankExtensionTransactionSchema: {
      /** @description Cooldown details. */
      cooldown: components["schemas"]["CooldownSchema"];
      /** @description Transaction details. */
      transaction: components["schemas"]["BankExtensionSchema"];
      /** @description Player details. */
      character: components["schemas"]["CharacterSchema"];
    };
    /** BankGoldTransactionResponseSchema */
    BankGoldTransactionResponseSchema: {
      data: components["schemas"]["BankGoldTransactionSchema"];
    };
    /** BankGoldTransactionSchema */
    BankGoldTransactionSchema: {
      /** @description Cooldown details. */
      cooldown: components["schemas"]["CooldownSchema"];
      /** @description Bank details. */
      bank: components["schemas"]["GoldSchema"];
      /** @description Player details. */
      character: components["schemas"]["CharacterSchema"];
    };
    /** BankItemTransactionResponseSchema */
    BankItemTransactionResponseSchema: {
      data: components["schemas"]["BankItemTransactionSchema"];
    };
    /** BankItemTransactionSchema */
    BankItemTransactionSchema: {
      /** @description Cooldown details. */
      cooldown: components["schemas"]["CooldownSchema"];
      /** @description Item details. */
      item: components["schemas"]["ItemSchema"];
      /**
       * Bank
       * @description Items in your banks.
       */
      bank: components["schemas"]["SimpleItemSchema"][];
      /** @description Player details. */
      character: components["schemas"]["CharacterSchema"];
    };
    /** BankResponseSchema */
    BankResponseSchema: {
      data: components["schemas"]["BankSchema"];
    };
    /** BankSchema */
    BankSchema: {
      /**
       * Slots
       * @description Maximum slots in your bank.
       */
      slots: number;
      /**
       * Expansions
       * @description Bank expansions.
       */
      expansions: number;
      /**
       * Next Expansion Cost
       * @description Next expansion cost.
       */
      next_expansion_cost: number;
      /**
       * Gold
       * @description Quantity of gold in your bank.
       */
      gold: number;
    };
    /** BaseAchievementSchema */
    BaseAchievementSchema: {
      /**
       * Name
       * @description Name of the achievement.
       */
      name: string;
      /**
       * Code
       * @description Code of the achievement.
       */
      code: string;
      /**
       * Description
       * @description Description of the achievement.
       */
      description: string;
      /**
       * Points
       * @description Points of the achievement. Used for the leaderboard.
       */
      points: number;
      /**
       * Type
       * @description Type of achievement.
       * @enum {string}
       */
      type: "combat_kill" | "combat_drop" | "combat_level" | "gathering" | "crafting" | "recycling" | "task" | "other";
      /**
       * Target
       * @description Target of the achievement.
       */
      target: string | null;
      /**
       * Total
       * @description Total to do.
       */
      total: number;
    };
    /** BaseachievementResponseSchema */
    BaseachievementResponseSchema: {
      data: components["schemas"]["BaseAchievementSchema"];
    };
    /** BlockedHitsSchema */
    BlockedHitsSchema: {
      /**
       * Fire
       * @description The amount of fire hits blocked.
       */
      fire: number;
      /**
       * Earth
       * @description The amount of earth hits blocked.
       */
      earth: number;
      /**
       * Water
       * @description The amount of water hits blocked.
       */
      water: number;
      /**
       * Air
       * @description The amount of air hits blocked.
       */
      air: number;
      /**
       * Total
       * @description The amount of total hits blocked.
       */
      total: number;
    };
    /** ChangePassword */
    ChangePassword: {
      /**
       * Password
       * @description Your password.
       */
      password: string;
    };
    /** CharacterFightDataSchema */
    CharacterFightDataSchema: {
      /** @description Cooldown details. */
      cooldown: components["schemas"]["CooldownSchema"];
      /** @description Fight details. */
      fight: components["schemas"]["FightSchema"];
      /** @description Player details. */
      character: components["schemas"]["CharacterSchema"];
    };
    /** CharacterFightResponseSchema */
    CharacterFightResponseSchema: {
      data: components["schemas"]["CharacterFightDataSchema"];
    };
    /** CharacterLeaderboardSchema */
    CharacterLeaderboardSchema: {
      /**
       * Name
       * @description Character name.
       */
      name: string;
      /**
       * Skin
       * @description Character skin code.
       */
      skin: string;
      /**
       * Achievements Points
       * @description Achievements points.
       */
      achievements_points: number;
      /**
       * Level
       * @description Combat level.
       */
      level: number;
      /**
       * Total Xp
       * @description Total XP of your character.
       */
      total_xp: number;
      /**
       * Mining Level
       * @description Mining level.
       */
      mining_level: number;
      /**
       * Mining Total Xp
       * @description Mining total xp.
       */
      mining_total_xp: number;
      /**
       * Woodcutting Level
       * @description Woodcutting level.
       */
      woodcutting_level: number;
      /**
       * Woodcutting Total Xp
       * @description Woodcutting total xp.
       */
      woodcutting_total_xp: number;
      /**
       * Fishing Level
       * @description Fishing level.
       */
      fishing_level: number;
      /**
       * Fishing Total Xp
       * @description Fishing total xp.
       */
      fishing_total_xp: number;
      /**
       * Weaponcrafting Level
       * @description Weaponcrafting level.
       */
      weaponcrafting_level: number;
      /**
       * Weaponcrafting Total Xp
       * @description Weaponcrafting total xp.
       */
      weaponcrafting_total_xp: number;
      /**
       * Gearcrafting Level
       * @description Gearcrafting level.
       */
      gearcrafting_level: number;
      /**
       * Gearcrafting Total Xp
       * @description Gearcrafting total xp.
       */
      gearcrafting_total_xp: number;
      /**
       * Jewelrycrafting Level
       * @description Jewelrycrafting level.
       */
      jewelrycrafting_level: number;
      /**
       * Jewelrycrafting Total Xp
       * @description Jewelrycrafting total xp.
       */
      jewelrycrafting_total_xp: number;
      /**
       * Cooking Level
       * @description Cooking level.
       */
      cooking_level: number;
      /**
       * Cooking Total Xp
       * @description Cooking total xp.
       */
      cooking_total_xp: number;
      /**
       * Gold
       * @description The numbers of golds on this character.
       */
      gold: number;
    };
    /** CharacterMovementDataSchema */
    CharacterMovementDataSchema: {
      /** @description Cooldown details */
      cooldown: components["schemas"]["CooldownSchema"];
      /** @description Destination details. */
      destination: components["schemas"]["MapSchema"];
      /** @description Character details. */
      character: components["schemas"]["CharacterSchema"];
    };
    /** CharacterMovementResponseSchema */
    CharacterMovementResponseSchema: {
      data: components["schemas"]["CharacterMovementDataSchema"];
    };
    /** CharacterResponseSchema */
    CharacterResponseSchema: {
      data: components["schemas"]["CharacterSchema"];
    };
    /** CharacterSchema */
    CharacterSchema: {
      /**
       * Name
       * @description Name of the character.
       */
      name: string;
      /**
       * Skin
       * @description Character skin code.
       * @enum {string}
       */
      skin: "men1" | "men2" | "men3" | "women1" | "women2" | "women3";
      /**
       * Level
       * @description Combat level.
       */
      level: number;
      /**
       * Xp
       * @description The current xp level of the combat level.
       */
      xp: number;
      /**
       * Max Xp
       * @description XP required to level up the character.
       */
      max_xp: number;
      /**
       * Achievements Points
       * @description achievements points.
       */
      achievements_points: number;
      /**
       * Gold
       * @description The numbers of golds on this character.
       */
      gold: number;
      /**
       * Speed
       * @description *Not available, on the roadmap. Character movement speed.
       */
      speed: number;
      /**
       * Mining Level
       * @description Mining level.
       */
      mining_level: number;
      /**
       * Mining Xp
       * @description The current xp level of the Mining skill.
       */
      mining_xp: number;
      /**
       * Mining Max Xp
       * @description Mining XP required to level up the skill.
       */
      mining_max_xp: number;
      /**
       * Woodcutting Level
       * @description Woodcutting level.
       */
      woodcutting_level: number;
      /**
       * Woodcutting Xp
       * @description The current xp level of the Woodcutting skill.
       */
      woodcutting_xp: number;
      /**
       * Woodcutting Max Xp
       * @description Woodcutting XP required to level up the skill.
       */
      woodcutting_max_xp: number;
      /**
       * Fishing Level
       * @description Fishing level.
       */
      fishing_level: number;
      /**
       * Fishing Xp
       * @description The current xp level of the Fishing skill.
       */
      fishing_xp: number;
      /**
       * Fishing Max Xp
       * @description Fishing XP required to level up the skill.
       */
      fishing_max_xp: number;
      /**
       * Weaponcrafting Level
       * @description Weaponcrafting level.
       */
      weaponcrafting_level: number;
      /**
       * Weaponcrafting Xp
       * @description The current xp level of the Weaponcrafting skill.
       */
      weaponcrafting_xp: number;
      /**
       * Weaponcrafting Max Xp
       * @description Weaponcrafting XP required to level up the skill.
       */
      weaponcrafting_max_xp: number;
      /**
       * Gearcrafting Level
       * @description Gearcrafting level.
       */
      gearcrafting_level: number;
      /**
       * Gearcrafting Xp
       * @description The current xp level of the Gearcrafting skill.
       */
      gearcrafting_xp: number;
      /**
       * Gearcrafting Max Xp
       * @description Gearcrafting XP required to level up the skill.
       */
      gearcrafting_max_xp: number;
      /**
       * Jewelrycrafting Level
       * @description Jewelrycrafting level.
       */
      jewelrycrafting_level: number;
      /**
       * Jewelrycrafting Xp
       * @description The current xp level of the Jewelrycrafting skill.
       */
      jewelrycrafting_xp: number;
      /**
       * Jewelrycrafting Max Xp
       * @description Jewelrycrafting XP required to level up the skill.
       */
      jewelrycrafting_max_xp: number;
      /**
       * Cooking Level
       * @description The current xp level of the Cooking skill.
       */
      cooking_level: number;
      /**
       * Cooking Xp
       * @description Cooking XP.
       */
      cooking_xp: number;
      /**
       * Cooking Max Xp
       * @description Cooking XP required to level up the skill.
       */
      cooking_max_xp: number;
      /**
       * Hp
       * @description Character HP.
       */
      hp: number;
      /**
       * Haste
       * @description *Character Haste. Increase speed attack (reduce fight cooldown)
       */
      haste: number;
      /**
       * Critical Strike
       * @description *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the attack's damage.
       */
      critical_strike: number;
      /**
       * Stamina
       * @description *Not available, on the roadmap. Regenerates life at the start of each turn.
       */
      stamina: number;
      /**
       * Attack Fire
       * @description Fire attack.
       */
      attack_fire: number;
      /**
       * Attack Earth
       * @description Earth attack.
       */
      attack_earth: number;
      /**
       * Attack Water
       * @description Water attack.
       */
      attack_water: number;
      /**
       * Attack Air
       * @description Air attack.
       */
      attack_air: number;
      /**
       * Dmg Fire
       * @description % Fire damage.
       */
      dmg_fire: number;
      /**
       * Dmg Earth
       * @description % Earth damage.
       */
      dmg_earth: number;
      /**
       * Dmg Water
       * @description % Water damage.
       */
      dmg_water: number;
      /**
       * Dmg Air
       * @description % Air damage.
       */
      dmg_air: number;
      /**
       * Res Fire
       * @description % Fire resistance.
       */
      res_fire: number;
      /**
       * Res Earth
       * @description % Earth resistance.
       */
      res_earth: number;
      /**
       * Res Water
       * @description % Water resistance.
       */
      res_water: number;
      /**
       * Res Air
       * @description % Air resistance.
       */
      res_air: number;
      /**
       * X
       * @description Character x coordinate.
       */
      x: number;
      /**
       * Y
       * @description Character y coordinate.
       */
      y: number;
      /**
       * Cooldown
       * @description Cooldown in seconds.
       */
      cooldown: number;
      /**
       * Cooldown Expiration
       * Format: date-time
       * @description Datetime Cooldown expiration.
       */
      cooldown_expiration?: string;
      /**
       * Weapon Slot
       * @description Weapon slot.
       */
      weapon_slot: string;
      /**
       * Shield Slot
       * @description Shield slot.
       */
      shield_slot: string;
      /**
       * Helmet Slot
       * @description Helmet slot.
       */
      helmet_slot: string;
      /**
       * Body Armor Slot
       * @description Body armor slot.
       */
      body_armor_slot: string;
      /**
       * Leg Armor Slot
       * @description Leg armor slot.
       */
      leg_armor_slot: string;
      /**
       * Boots Slot
       * @description Boots slot.
       */
      boots_slot: string;
      /**
       * Ring1 Slot
       * @description Ring 1 slot.
       */
      ring1_slot: string;
      /**
       * Ring2 Slot
       * @description Ring 2 slot.
       */
      ring2_slot: string;
      /**
       * Amulet Slot
       * @description Amulet slot.
       */
      amulet_slot: string;
      /**
       * Artifact1 Slot
       * @description Artifact 1 slot.
       */
      artifact1_slot: string;
      /**
       * Artifact2 Slot
       * @description Artifact 2 slot.
       */
      artifact2_slot: string;
      /**
       * Artifact3 Slot
       * @description Artifact 3 slot.
       */
      artifact3_slot: string;
      /**
       * Consumable1 Slot
       * @description Consumable 1 slot.
       */
      consumable1_slot: string;
      /**
       * Consumable1 Slot Quantity
       * @description Consumable 1 quantity.
       */
      consumable1_slot_quantity: number;
      /**
       * Consumable2 Slot
       * @description Consumable 2 slot.
       */
      consumable2_slot: string;
      /**
       * Consumable2 Slot Quantity
       * @description Consumable 2 quantity.
       */
      consumable2_slot_quantity: number;
      /**
       * Task
       * @description Task in progress.
       */
      task: string;
      /**
       * Task Type
       * @description Task type.
       */
      task_type: string;
      /**
       * Task Progress
       * @description Task progression.
       */
      task_progress: number;
      /**
       * Task Total
       * @description Task total objective.
       */
      task_total: number;
      /**
       * Inventory Max Items
       * @description Inventory max items.
       */
      inventory_max_items: number;
      /**
       * Inventory
       * @description List of inventory slots.
       */
      inventory?: components["schemas"]["InventorySlot"][];
    };
    /** CooldownSchema */
    CooldownSchema: {
      /**
       * Total Seconds
       * @description The total seconds of the cooldown.
       */
      total_seconds: number;
      /**
       * Remaining Seconds
       * @description The remaining seconds of the cooldown.
       */
      remaining_seconds: number;
      /**
       * Started At
       * Format: date-time
       * @description The start of the cooldown.
       */
      started_at: string;
      /**
       * Expiration
       * Format: date-time
       * @description The expiration of the cooldown.
       */
      expiration: string;
      /**
       * Reason
       * @description The reason of the cooldown.
       * @enum {string}
       */
      reason:
        | "movement"
        | "fight"
        | "crafting"
        | "gathering"
        | "buy_ge"
        | "sell_ge"
        | "delete_item"
        | "deposit_bank"
        | "withdraw_bank"
        | "equip"
        | "unequip"
        | "task"
        | "recycling";
    };
    /** CraftSchema */
    CraftSchema: {
      /**
       * Skill code
       * @description Skill required to craft the item.
       * @enum {string}
       */
      skill?: "weaponcrafting" | "gearcrafting" | "jewelrycrafting" | "cooking" | "woodcutting" | "mining";
      /**
       * Level
       * @description The skill level required to craft the item.
       */
      level?: number;
      /**
       * Items
       * @description List of items required to craft the item.
       */
      items?: components["schemas"]["SimpleItemSchema"][];
      /**
       * Quantity
       * @description Quantity of items crafted.
       */
      quantity?: number;
    };
    /** CraftingSchema */
    CraftingSchema: {
      /**
       * Craft code
       * @description Craft code.
       */
      code: string;
      /**
       * Quantity
       * @description Quantity of items to craft.
       * @default 1
       */
      quantity: number;
    };
    /** DataPage[AchievementSchema] */
    DataPage_AchievementSchema_: {
      /** Data */
      data: components["schemas"]["AchievementSchema"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** DataPage[ActiveEventSchema] */
    DataPage_ActiveEventSchema_: {
      /** Data */
      data: components["schemas"]["ActiveEventSchema"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** DataPage[BaseAchievementSchema] */
    DataPage_BaseAchievementSchema_: {
      /** Data */
      data: components["schemas"]["BaseAchievementSchema"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** DataPage[CharacterLeaderboardSchema] */
    DataPage_CharacterLeaderboardSchema_: {
      /** Data */
      data: components["schemas"]["CharacterLeaderboardSchema"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** DataPage[CharacterSchema] */
    DataPage_CharacterSchema_: {
      /** Data */
      data: components["schemas"]["CharacterSchema"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** DataPage[GEItemSchema] */
    DataPage_GEItemSchema_: {
      /** Data */
      data: components["schemas"]["GEItemSchema"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** DataPage[ItemSchema] */
    DataPage_ItemSchema_: {
      /** Data */
      data: components["schemas"]["ItemSchema"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** DataPage[LogSchema] */
    DataPage_LogSchema_: {
      /** Data */
      data: components["schemas"]["LogSchema"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** DataPage[MapSchema] */
    DataPage_MapSchema_: {
      /** Data */
      data: components["schemas"]["MapSchema"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** DataPage[MonsterSchema] */
    DataPage_MonsterSchema_: {
      /** Data */
      data: components["schemas"]["MonsterSchema"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** DataPage[ResourceSchema] */
    DataPage_ResourceSchema_: {
      /** Data */
      data: components["schemas"]["ResourceSchema"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** DataPage[SimpleItemSchema] */
    DataPage_SimpleItemSchema_: {
      /** Data */
      data: components["schemas"]["SimpleItemSchema"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** DataPage[TaskFullSchema] */
    DataPage_TaskFullSchema_: {
      /** Data */
      data: components["schemas"]["TaskFullSchema"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** DataPage[TasksRewardFullSchema] */
    DataPage_TasksRewardFullSchema_: {
      /** Data */
      data: components["schemas"]["TasksRewardFullSchema"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** DeleteCharacterSchema */
    DeleteCharacterSchema: {
      /**
       * Name
       * @description Character name.
       */
      name: string;
    };
    /** DeleteItemResponseSchema */
    DeleteItemResponseSchema: {
      data: components["schemas"]["DeleteItemSchema"];
    };
    /** DeleteItemSchema */
    DeleteItemSchema: {
      /** @description Cooldown details. */
      cooldown: components["schemas"]["CooldownSchema"];
      /** @description Item details. */
      item: components["schemas"]["SimpleItemSchema"];
      /** @description Player details. */
      character: components["schemas"]["CharacterSchema"];
    };
    /** DepositWithdrawGoldSchema */
    DepositWithdrawGoldSchema: {
      /**
       * Quantity
       * @description Quantity of gold.
       */
      quantity: number;
    };
    /** DestinationSchema */
    DestinationSchema: {
      /**
       * X
       * @description The x coordinate of the destination.
       */
      x: number;
      /**
       * Y
       * @description The y coordinate of the destination.
       */
      y: number;
    };
    /** DropRateSchema */
    DropRateSchema: {
      /**
       * Item code
       * @description Item code.
       */
      code: string;
      /**
       * Rate
       * @description Chance rate.
       */
      rate: number;
      /**
       * Min Quantity
       * @description Minimum quantity.
       */
      min_quantity: number;
      /**
       * Max Quantity
       * @description Maximum quantity.
       */
      max_quantity: number;
    };
    /** DropSchema */
    DropSchema: {
      /**
       * Code
       * @description The code of the item.
       */
      code: string;
      /**
       * Quantity
       * @description The quantity of the item.
       */
      quantity: number;
    };
    /** EquipRequestSchema */
    EquipRequestSchema: {
      /** @description Cooldown details. */
      cooldown: components["schemas"]["CooldownSchema"];
      /**
       * Slot
       * @description Item slot.
       * @enum {string}
       */
      slot:
        | "weapon"
        | "shield"
        | "helmet"
        | "body_armor"
        | "leg_armor"
        | "boots"
        | "ring1"
        | "ring2"
        | "amulet"
        | "artifact1"
        | "artifact2"
        | "artifact3"
        | "consumable1"
        | "consumable2";
      /** @description Item details. */
      item: components["schemas"]["ItemSchema"];
      /** @description Player details. */
      character: components["schemas"]["CharacterSchema"];
    };
    /** EquipSchema */
    EquipSchema: {
      /**
       * Code
       * @description Item code.
       */
      code: string;
      /**
       * Slot
       * @description Item slot.
       * @enum {string}
       */
      slot:
        | "weapon"
        | "shield"
        | "helmet"
        | "body_armor"
        | "leg_armor"
        | "boots"
        | "ring1"
        | "ring2"
        | "amulet"
        | "artifact1"
        | "artifact2"
        | "artifact3"
        | "consumable1"
        | "consumable2";
      /**
       * Quantity
       * @description Item quantity. Applicable to consumables only.
       * @default 1
       */
      quantity: number;
    };
    /** EquipmentResponseSchema */
    EquipmentResponseSchema: {
      data: components["schemas"]["EquipRequestSchema"];
    };
    /** FightSchema */
    FightSchema: {
      /**
       * Xp
       * @description The amount of xp gained by the fight.
       */
      xp: number;
      /**
       * Gold
       * @description The amount of gold gained by the fight.
       */
      gold: number;
      /**
       * Drops
       * @description The items dropped by the fight.
       */
      drops: components["schemas"]["DropSchema"][];
      /**
       * Turns
       * @description Numbers of the turns of the combat.
       */
      turns: number;
      /** @description The amount of blocked hits by the monster. */
      monster_blocked_hits: components["schemas"]["BlockedHitsSchema"];
      /** @description The amount of blocked hits by the player. */
      player_blocked_hits: components["schemas"]["BlockedHitsSchema"];
      /**
       * Logs
       * @description The fight logs.
       */
      logs: string[];
      /**
       * Result
       * @description The result of the fight.
       * @enum {string}
       */
      result: "win" | "lose";
    };
    /** GEItemResponseSchema */
    GEItemResponseSchema: {
      data: components["schemas"]["GEItemSchema"];
    };
    /** GEItemSchema */
    GEItemSchema: {
      /**
       * Code
       * @description Item code.
       */
      code: string;
      /**
       * Stock
       * @description Item stock.
       */
      stock: number;
      /**
       * Sell Price
       * @description The item's selling price.
       */
      sell_price?: number;
      /**
       * Buy Price
       * @description The item's buying price.
       */
      buy_price?: number;
      /**
       * Max Quantity
       * @description The number of items you can buy or sell at the same time.
       */
      max_quantity: number;
    };
    /** GETransactionItemSchema */
    GETransactionItemSchema: {
      /**
       * Code
       * @description Item code.
       */
      code: string;
      /**
       * Quantity
       * @description Item quantity.
       */
      quantity: number;
      /**
       * Price
       * @description Item price. Item price validation protects you if the price has changed since you last checked the buy/sale price of an item.
       */
      price: number;
    };
    /** GETransactionListSchema */
    GETransactionListSchema: {
      /** @description Cooldown details. */
      cooldown: components["schemas"]["CooldownSchema"];
      /** @description Transaction details. */
      transaction: components["schemas"]["GETransactionSchema"];
      /** @description Character details. */
      character: components["schemas"]["CharacterSchema"];
    };
    /** GETransactionResponseSchema */
    GETransactionResponseSchema: {
      data: components["schemas"]["GETransactionListSchema"];
    };
    /** GETransactionSchema */
    GETransactionSchema: {
      /**
       * Code
       * @description Item code.
       */
      code: string;
      /**
       * Quantity
       * @description Item quantity.
       */
      quantity: number;
      /**
       * Price
       * @description Item price.
       */
      price: number;
      /**
       * Total Price
       * @description Total price of the transaction.
       */
      total_price: number;
    };
    /** GoldSchema */
    GoldSchema: {
      /**
       * Quantity
       * @description Quantity of gold.
       */
      quantity: number;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** InventorySlot */
    InventorySlot: {
      /**
       * Slot
       * @description Inventory slot identifier.
       */
      slot: number;
      /**
       * Code
       * @description Item code.
       */
      code: string;
      /**
       * Quantity
       * @description Quantity in the slot.
       */
      quantity: number;
    };
    /** ItemEffectSchema */
    ItemEffectSchema: {
      /**
       * Name
       * @description Effect name.
       */
      name: string;
      /**
       * Value
       * @description Effect value.
       */
      value: number;
    };
    /** ItemResponseSchema */
    ItemResponseSchema: {
      data: components["schemas"]["SingleItemSchema"];
    };
    /** ItemSchema */
    ItemSchema: {
      /**
       * Name
       * @description Item name.
       */
      name: string;
      /**
       * Code
       * @description Item code. This is the item's unique identifier (ID).
       */
      code: string;
      /**
       * Level
       * @description Item level.
       */
      level: number;
      /**
       * Type
       * @description Item type.
       */
      type: string;
      /**
       * Subtype
       * @description Item subtype.
       */
      subtype: string;
      /**
       * Description
       * @description Item description.
       */
      description: string;
      /**
       * Effects
       * @description List of object effects. For equipment, it will include item stats.
       */
      effects?: components["schemas"]["ItemEffectSchema"][];
      /** @description Craft information. If applicable. */
      craft?: components["schemas"]["CraftSchema"] | null;
    };
    /** LogSchema */
    LogSchema: {
      /**
       * Character
       * @description Character name.
       */
      character: string;
      /**
       * Account
       * @description Account character.
       */
      account: string;
      /**
       * Type
       * @description Type of action.
       */
      type: string;
      /**
       * Description
       * @description Description of action.
       */
      description: string;
      /**
       * Content
       * @description Content of action.
       */
      content: unknown;
      /**
       * Cooldown
       * @description Cooldown in seconds.
       */
      cooldown: number;
      /**
       * Cooldown Expiration
       * @description Datetime of cooldown expiration.
       */
      cooldown_expiration: string | null;
      /**
       * Created At
       * Format: date-time
       * @description Datetime of creation.
       */
      created_at: string;
    };
    /** MapContentSchema */
    MapContentSchema: {
      /**
       * Type
       * @description Type of the content.
       */
      type: string;
      /**
       * Code
       * @description Code of the content.
       */
      code: string;
    };
    /** MapResponseSchema */
    MapResponseSchema: {
      data: components["schemas"]["MapSchema"];
    };
    /** MapSchema */
    MapSchema: {
      /**
       * Name
       * @description Name of the map.
       */
      name: string;
      /**
       * Skin
       * @description Skin of the map.
       */
      skin: string;
      /**
       * X
       * @description Position X of the map.
       */
      x: number;
      /**
       * Y
       * @description Position Y of the map.
       */
      y: number;
      /** @description Content of the map. */
      content: components["schemas"]["MapContentSchema"] | null;
    };
    /** MonsterResponseSchema */
    MonsterResponseSchema: {
      data: components["schemas"]["MonsterSchema"];
    };
    /** MonsterSchema */
    MonsterSchema: {
      /**
       * Name
       * @description Name of the monster.
       */
      name: string;
      /**
       * Code
       * @description The code of the monster. This is the monster's unique identifier (ID).
       */
      code: string;
      /**
       * Level
       * @description Monster level.
       */
      level: number;
      /**
       * Hp
       * @description Monster hit points.
       */
      hp: number;
      /**
       * Attack Fire
       * @description Monster fire attack.
       */
      attack_fire: number;
      /**
       * Attack Earth
       * @description Monster earth attack.
       */
      attack_earth: number;
      /**
       * Attack Water
       * @description Monster water attack.
       */
      attack_water: number;
      /**
       * Attack Air
       * @description Monster air attack.
       */
      attack_air: number;
      /**
       * Res Fire
       * @description Monster % fire resistance.
       */
      res_fire: number;
      /**
       * Res Earth
       * @description Monster % earth resistance.
       */
      res_earth: number;
      /**
       * Res Water
       * @description Monster % water resistance.
       */
      res_water: number;
      /**
       * Res Air
       * @description Monster % air resistance.
       */
      res_air: number;
      /**
       * Min Gold
       * @description Monster minimum gold drop.
       */
      min_gold: number;
      /**
       * Max Gold
       * @description Monster maximum gold drop.
       */
      max_gold: number;
      /**
       * Drops
       * @description Monster drops. This is a list of items that the monster drops after killing the monster.
       */
      drops: components["schemas"]["DropRateSchema"][];
    };
    /** MyCharactersListSchema */
    MyCharactersListSchema: {
      /**
       * Data
       * @description List of your characters.
       */
      data: components["schemas"]["CharacterSchema"][];
    };
    /** RecyclingDataSchema */
    RecyclingDataSchema: {
      /** @description Cooldown details. */
      cooldown: components["schemas"]["CooldownSchema"];
      /** @description Craft details. */
      details: components["schemas"]["RecyclingItemsSchema"];
      /** @description Player details. */
      character: components["schemas"]["CharacterSchema"];
    };
    /** RecyclingItemsSchema */
    RecyclingItemsSchema: {
      /**
       * Items
       * @description Objects received.
       */
      items: components["schemas"]["DropSchema"][];
    };
    /** RecyclingResponseSchema */
    RecyclingResponseSchema: {
      data: components["schemas"]["RecyclingDataSchema"];
    };
    /** RecyclingSchema */
    RecyclingSchema: {
      /**
       * Item code
       * @description Item code.
       */
      code: string;
      /**
       * Quantity
       * @description Quantity of items to recycle.
       * @default 1
       */
      quantity: number;
    };
    /** ResourceResponseSchema */
    ResourceResponseSchema: {
      data: components["schemas"]["ResourceSchema"];
    };
    /** ResourceSchema */
    ResourceSchema: {
      /**
       * Name
       * @description The name of the resource
       */
      name: string;
      /**
       * Code
       * @description The code of the resource. This is the resource's unique identifier (ID).
       */
      code: string;
      /**
       * Skill code
       * @description The skill required to gather this resource.
       * @enum {string}
       */
      skill: "mining" | "woodcutting" | "fishing";
      /**
       * Level
       * @description The skill level required to gather this resource.
       */
      level: number;
      /**
       * Drops
       * @description The drops of this resource.
       */
      drops: components["schemas"]["DropRateSchema"][];
    };
    /** ResponseSchema */
    ResponseSchema: {
      /** Message */
      message: string;
    };
    /** SimpleItemSchema */
    SimpleItemSchema: {
      /**
       * Code
       * @description Item code.
       */
      code: string;
      /**
       * Quantity
       * @description Item quantity.
       */
      quantity: number;
    };
    /** SingleItemSchema */
    SingleItemSchema: {
      /** @description Item information. */
      item: components["schemas"]["ItemSchema"];
      /** @description Grand Exchange information. If applicable. */
      ge?: components["schemas"]["GEItemSchema"] | null;
    };
    /** SkillDataSchema */
    SkillDataSchema: {
      /** @description Cooldown details. */
      cooldown: components["schemas"]["CooldownSchema"];
      /** @description Craft details. */
      details: components["schemas"]["SkillInfoSchema"];
      /** @description Player details. */
      character: components["schemas"]["CharacterSchema"];
    };
    /** SkillInfoSchema */
    SkillInfoSchema: {
      /**
       * Xp
       * @description The amount of xp gained.
       */
      xp: number;
      /**
       * Items
       * @description Objects received.
       */
      items: components["schemas"]["DropSchema"][];
    };
    /** SkillResponseSchema */
    SkillResponseSchema: {
      data: components["schemas"]["SkillDataSchema"];
    };
    /** StatusResponseSchema */
    StatusResponseSchema: {
      data: components["schemas"]["StatusSchema"];
    };
    /** StatusSchema */
    StatusSchema: {
      /**
       * Status
       * @description Server status
       */
      status: string;
      /** Version */
      version?: string;
      /**
       * Max Level
       * @description Maximum level.
       */
      max_level: number;
      /**
       * Characters Online
       * @description Characters online.
       */
      characters_online: number;
      /**
       * Server Time
       * Format: date-time
       * @description Server time.
       */
      server_time: string;
      /**
       * Announcements
       * @description Server announcements.
       */
      announcements: components["schemas"]["AnnouncementSchema"][];
      /**
       * Last Wipe
       * @description Last server wipe.
       */
      last_wipe: string;
      /**
       * Next Wipe
       * @description Next server wipe.
       */
      next_wipe: string;
    };
    /** TaskCancelledResponseSchema */
    TaskCancelledResponseSchema: {
      data: components["schemas"]["TaskCancelledSchema"];
    };
    /** TaskCancelledSchema */
    TaskCancelledSchema: {
      /** @description Cooldown details. */
      cooldown: components["schemas"]["CooldownSchema"];
      /** @description Player details. */
      character: components["schemas"]["CharacterSchema"];
    };
    /** TaskDataSchema */
    TaskDataSchema: {
      /** @description Cooldown details. */
      cooldown: components["schemas"]["CooldownSchema"];
      /** @description Task details. */
      task: components["schemas"]["TaskSchema"];
      /** @description Player details. */
      character: components["schemas"]["CharacterSchema"];
    };
    /** TaskFullResponseSchema */
    TaskFullResponseSchema: {
      data: components["schemas"]["TaskFullSchema"];
    };
    /** TaskFullSchema */
    TaskFullSchema: {
      /**
       * Code
       * @description Task objective.
       */
      code: string;
      /**
       * Level
       * @description Task level.
       */
      level: number;
      /**
       * Type
       * @description The type of task.
       * @enum {string}
       */
      type: "monsters" | "items";
      /**
       * Min Quantity
       * @description Minimum amount of task.
       */
      min_quantity: number;
      /**
       * Max Quantity
       * @description Maximum amount of task.
       */
      max_quantity: number;
      /**
       * Skill
       * @description Skill required to complete the task.
       */
      skill: string | null;
    };
    /** TaskResponseSchema */
    TaskResponseSchema: {
      data: components["schemas"]["TaskDataSchema"];
    };
    /** TaskSchema */
    TaskSchema: {
      /**
       * Code
       * @description Task objective.
       */
      code: string;
      /**
       * Type
       * @description The type of task.
       * @enum {string}
       */
      type: "monsters" | "items";
      /**
       * Total
       * @description The total required to complete the task.
       */
      total: number;
    };
    /** TaskTradeDataSchema */
    TaskTradeDataSchema: {
      /** @description Cooldown details. */
      cooldown: components["schemas"]["CooldownSchema"];
      /** @description Reward details. */
      trade: components["schemas"]["TaskTradeSchema"];
      /** @description Player details. */
      character: components["schemas"]["CharacterSchema"];
    };
    /** TaskTradeResponseSchema */
    TaskTradeResponseSchema: {
      data: components["schemas"]["TaskTradeDataSchema"];
    };
    /** TaskTradeSchema */
    TaskTradeSchema: {
      /**
       * Code
       * @description Item code.
       */
      code: string;
      /**
       * Quantity
       * @description Item quantity.
       */
      quantity: number;
    };
    /** TasksRewardDataSchema */
    TasksRewardDataSchema: {
      /** @description Cooldown details. */
      cooldown: components["schemas"]["CooldownSchema"];
      /** @description Reward details. */
      reward: components["schemas"]["TasksRewardSchema"];
      /** @description Player details. */
      character: components["schemas"]["CharacterSchema"];
    };
    /** TasksRewardFullResponseSchema */
    TasksRewardFullResponseSchema: {
      data: components["schemas"]["TasksRewardFullSchema"];
    };
    /** TasksRewardFullSchema */
    TasksRewardFullSchema: {
      /**
       * Code
       * @description Item code.
       */
      code: string;
      /**
       * Min Quantity
       * @description Minimum quantity of item.
       */
      min_quantity: number;
      /**
       * Max Quantity
       * @description Maximum quantity of item.
       */
      max_quantity: number;
      /**
       * Odds
       * @description Item odds.
       */
      odds: number;
    };
    /** TasksRewardResponseSchema */
    TasksRewardResponseSchema: {
      data: components["schemas"]["TasksRewardDataSchema"];
    };
    /** TasksRewardSchema */
    TasksRewardSchema: {
      /**
       * Code
       * @description Item code.
       */
      code: string;
      /**
       * Quantity
       * @description Item quantity.
       */
      quantity: number;
    };
    /** TokenResponseSchema */
    TokenResponseSchema: {
      /** Token */
      token: string;
    };
    /** UnequipSchema */
    UnequipSchema: {
      /**
       * Slot
       * @description Item slot.
       * @enum {string}
       */
      slot:
        | "weapon"
        | "shield"
        | "helmet"
        | "body_armor"
        | "leg_armor"
        | "boots"
        | "ring1"
        | "ring2"
        | "amulet"
        | "artifact1"
        | "artifact2"
        | "artifact3"
        | "consumable1"
        | "consumable2";
      /**
       * Quantity
       * @description Item quantity. Applicable to consumables only.
       * @default 1
       */
      quantity: number;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  action_move_my__name__action_move_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of your character. */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DestinationSchema"];
      };
    };
    responses: {
      /** @description The character has moved successfully. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CharacterMovementResponseSchema"];
        };
      };
      /** @description Map not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description An action is already in progress by your character. */
      486: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character already at destination. */
      490: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character in cooldown. */
      499: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  action_equip_item_my__name__action_equip_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of your character. */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EquipSchema"];
      };
    };
    responses: {
      /** @description The item has been successfully equipped on your character. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EquipmentResponseSchema"];
        };
      };
      /** @description Item not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Missing item or insufficient quantity. */
      478: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character can't equip more than 100 consumables in the same slot. */
      484: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description This item is already equipped. */
      485: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description An action is already in progress by your character. */
      486: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Slot is not empty. */
      491: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character level is insufficient. */
      496: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character inventory is full. */
      497: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character in cooldown. */
      499: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  action_unequip_item_my__name__action_unequip_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of your character. */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UnequipSchema"];
      };
    };
    responses: {
      /** @description The item has been successfully unequipped and added in his inventory. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EquipmentResponseSchema"];
        };
      };
      /** @description Item not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Missing item or insufficient quantity. */
      478: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description An action is already in progress by your character. */
      486: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Slot is empty. */
      491: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character inventory is full. */
      497: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character in cooldown. */
      499: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  action_fight_my__name__action_fight_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of your character. */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The fight ended successfully. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CharacterFightResponseSchema"];
        };
      };
      /** @description An action is already in progress by your character. */
      486: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character inventory is full. */
      497: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character in cooldown. */
      499: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Monster not found on this map. */
      598: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  action_gathering_my__name__action_gathering_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of your character. */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The resource has been successfully gathered. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SkillResponseSchema"];
        };
      };
      /** @description An action is already in progress by your character. */
      486: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not skill level required. */
      493: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character inventory is full. */
      497: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character in cooldown. */
      499: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Resource not found on this map. */
      598: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  action_crafting_my__name__action_crafting_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of your character. */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CraftingSchema"];
      };
    };
    responses: {
      /** @description The item was successfully crafted. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SkillResponseSchema"];
        };
      };
      /** @description Craft not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Missing item or insufficient quantity. */
      478: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description An action is already in progress by your character. */
      486: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not skill level required. */
      493: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character inventory is full. */
      497: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character in cooldown. */
      499: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Workshop not found on this map. */
      598: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  action_deposit_bank_my__name__action_bank_deposit_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of your character. */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SimpleItemSchema"];
      };
    };
    responses: {
      /** @description Item successfully deposited in your bank. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BankItemTransactionResponseSchema"];
        };
      };
      /** @description Item not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description A transaction is already in progress with this item/your golds in your bank. */
      461: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Your bank is full. */
      462: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Missing item or insufficient quantity. */
      478: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description An action is already in progress by your character. */
      486: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character in cooldown. */
      499: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bank not found on this map. */
      598: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  action_deposit_bank_gold_my__name__action_bank_deposit_gold_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of your character. */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DepositWithdrawGoldSchema"];
      };
    };
    responses: {
      /** @description Golds successfully deposited in your bank. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BankGoldTransactionResponseSchema"];
        };
      };
      /** @description A transaction is already in progress with this item/your golds in your bank. */
      461: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description An action is already in progress by your character. */
      486: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Insufficient golds on your character. */
      492: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character in cooldown. */
      499: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bank not found on this map. */
      598: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  action_recycling_my__name__action_recycling_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of your character. */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RecyclingSchema"];
      };
    };
    responses: {
      /** @description The items were successfully recycled. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RecyclingResponseSchema"];
        };
      };
      /** @description Item not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description This item cannot be recycled. */
      473: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Missing item or insufficient quantity. */
      478: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description An action is already in progress by your character. */
      486: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not skill level required. */
      493: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character inventory is full. */
      497: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character in cooldown. */
      499: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Workshop not found on this map. */
      598: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  action_withdraw_bank_my__name__action_bank_withdraw_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of your character. */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SimpleItemSchema"];
      };
    };
    responses: {
      /** @description Item successfully withdraw from your bank. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BankItemTransactionResponseSchema"];
        };
      };
      /** @description Item not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description A transaction is already in progress with this item/your golds in your bank. */
      461: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Missing item or insufficient quantity. */
      478: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description An action is already in progress by your character. */
      486: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character inventory is full. */
      497: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character in cooldown. */
      499: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bank not found on this map. */
      598: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  action_withdraw_bank_gold_my__name__action_bank_withdraw_gold_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of your character. */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DepositWithdrawGoldSchema"];
      };
    };
    responses: {
      /** @description Golds successfully withdraw from your bank. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BankGoldTransactionResponseSchema"];
        };
      };
      /** @description Insufficient golds in your bank. */
      460: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description A transaction is already in progress with this item/your golds in your bank. */
      461: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description An action is already in progress by your character. */
      486: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character in cooldown. */
      499: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bank not found on this map. */
      598: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  action_ge_buy_item_my__name__action_ge_buy_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of your character. */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GETransactionItemSchema"];
      };
    };
    responses: {
      /** @description Item successfully buy from the Grand Exchange. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GETransactionResponseSchema"];
        };
      };
      /** @description You can't buy or sell that many items at the same time. */
      479: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description No stock for this item. */
      480: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description No item at this price. */
      482: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description A transaction is already in progress on this item by a another character. */
      483: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description An action is already in progress by your character. */
      486: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Insufficient golds on your character. */
      492: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character inventory is full. */
      497: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character in cooldown. */
      499: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Grand Exchange not found on this map. */
      598: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  action_ge_sell_item_my__name__action_ge_sell_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of your character. */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GETransactionItemSchema"];
      };
    };
    responses: {
      /** @description Item successfully sell at the Grand Exchange. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GETransactionResponseSchema"];
        };
      };
      /** @description Item not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Missing item or insufficient quantity. */
      478: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description You can't buy or sell that many items at the same time. */
      479: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description No item at this price. */
      482: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description A transaction is already in progress on this item by a another character. */
      483: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description An action is already in progress by your character. */
      486: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character in cooldown. */
      499: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Grand Exchange not found on this map. */
      598: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  action_buy_bank_expansion_my__name__action_bank_buy_expansion_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of your character. */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Bank expansion successfully bought. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BankExtensionTransactionResponseSchema"];
        };
      };
      /** @description An action is already in progress by your character. */
      486: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Insufficient golds on your character. */
      492: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character in cooldown. */
      499: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bank not found on this map. */
      598: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  action_accept_new_task_my__name__action_task_new_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of your character. */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description New task successfully accepted. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TaskResponseSchema"];
        };
      };
      /** @description An action is already in progress by your character. */
      486: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character already has a task. */
      489: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character in cooldown. */
      499: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Tasks Master not found on this map. */
      598: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  action_complete_task_my__name__action_task_complete_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of your character. */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The task has been successfully completed. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TasksRewardResponseSchema"];
        };
      };
      /** @description An action is already in progress by your character. */
      486: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character has no task. */
      487: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character has not completed the task. */
      488: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character inventory is full. */
      497: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character in cooldown. */
      499: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Tasks Master not found on this map. */
      598: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  action_task_exchange_my__name__action_task_exchange_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of your character. */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The tasks coins have been successfully exchanged. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TasksRewardResponseSchema"];
        };
      };
      /** @description Missing item or insufficient quantity. */
      478: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description An action is already in progress by your character. */
      486: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character inventory is full. */
      497: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character in cooldown. */
      499: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Tasks Master not found on this map. */
      598: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  action_task_trade_my__name__action_task_trade_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of your character. */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SimpleItemSchema"];
      };
    };
    responses: {
      /** @description You have successfully trade items to a Tasks Master. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TaskTradeResponseSchema"];
        };
      };
      /** @description Character does not have this task. */
      474: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character have already completed the task or are trying to trade too many items. */
      475: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Missing item or insufficient quantity. */
      478: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description An action is already in progress by your character. */
      486: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character in cooldown. */
      499: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Tasks Master not found on this map. */
      598: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  action_task_cancel_my__name__action_task_cancel_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of your character. */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The task has been successfully cancelled. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TaskCancelledResponseSchema"];
        };
      };
      /** @description Missing item or insufficient quantity. */
      478: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description An action is already in progress by your character. */
      486: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character in cooldown. */
      499: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Tasks Master not found on this map. */
      598: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  action_delete_item_my__name__action_delete_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of your character. */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SimpleItemSchema"];
      };
    };
    responses: {
      /** @description Item successfully deleted from your character. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DeleteItemResponseSchema"];
        };
      };
      /** @description Missing item or insufficient quantity. */
      478: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description An action is already in progress by your character. */
      486: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character in cooldown. */
      499: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_all_characters_logs_my_logs_get: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched logs. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DataPage_LogSchema_"];
        };
      };
      /** @description Logs not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_my_characters_my_characters_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched characters. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MyCharactersListSchema"];
        };
      };
    };
  };
  get_bank_details_my_bank_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched bank details. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BankResponseSchema"];
        };
      };
    };
  };
  get_bank_items_my_bank_items_get: {
    parameters: {
      query?: {
        /** @description Item to search in your bank. */
        item_code?: string;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched items. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DataPage_SimpleItemSchema_"];
        };
      };
    };
  };
  change_password_my_change_password_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangePassword"];
      };
    };
    responses: {
      /** @description Password changed successfully. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResponseSchema"];
        };
      };
      /** @description Use a different password. */
      458: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  create_character_characters_create_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddCharacterSchema"];
      };
    };
    responses: {
      /** @description Successfully created character. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CharacterResponseSchema"];
        };
      };
      /** @description Name already used. */
      494: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Maximum characters reached on your account. */
      495: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  delete_character_characters_delete_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteCharacterSchema"];
      };
    };
    responses: {
      /** @description Successfully deleted character. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CharacterResponseSchema"];
        };
      };
      /** @description Character not found. */
      498: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_all_characters_characters_get: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched characters details. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DataPage_CharacterSchema_"];
        };
      };
    };
  };
  get_character_characters__name__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The character name. */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched character. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CharacterResponseSchema"];
        };
      };
      /** @description Character not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_character_achievements_characters__name__achievements_get: {
    parameters: {
      query?: {
        /** @description Type of achievements. */
        type?:
          | "combat_kill"
          | "combat_drop"
          | "combat_level"
          | "gathering"
          | "crafting"
          | "recycling"
          | "task"
          | "other";
        /** @description Filter by completed achievements. */
        completed?: boolean;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
      header?: never;
      path: {
        /** @description The character name. */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched character. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DataPage_AchievementSchema_"];
        };
      };
      /** @description Character not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_all_maps_maps_get: {
    parameters: {
      query?: {
        /** @description Type of content on the map. */
        content_type?: "monster" | "resource" | "workshop" | "bank" | "grand_exchange" | "tasks_master";
        /** @description Content code on the map. */
        content_code?: string;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched maps details. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DataPage_MapSchema_"];
        };
      };
    };
  };
  get_map_maps__x___y__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The position x of the map. */
        x: number;
        /** @description The position X of the map. */
        y: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched map. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MapResponseSchema"];
        };
      };
      /** @description Map not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_all_items_items_get: {
    parameters: {
      query?: {
        /** @description Minimum level items. */
        min_level?: number;
        /** @description Maximum level items. */
        max_level?: number;
        /** @description Name of the item. */
        name?: string;
        /** @description Type of items. */
        type?:
          | "consumable"
          | "body_armor"
          | "weapon"
          | "resource"
          | "leg_armor"
          | "helmet"
          | "boots"
          | "shield"
          | "amulet"
          | "ring"
          | "artifact"
          | "currency";
        /** @description Skill to craft items. */
        craft_skill?: "weaponcrafting" | "gearcrafting" | "jewelrycrafting" | "cooking" | "woodcutting" | "mining";
        /** @description Item code of items used as material for crafting. */
        craft_material?: string;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Fetch items details. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DataPage_ItemSchema_"];
        };
      };
    };
  };
  get_item_items__code__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The code of the item. */
        code: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched item. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ItemResponseSchema"];
        };
      };
      /** @description Item not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_all_monsters_monsters_get: {
    parameters: {
      query?: {
        /** @description Monster minimum level. */
        min_level?: number;
        /** @description Monster maximum level. */
        max_level?: number;
        /**
         * @description Item code of the drop.
         * @example green_slimeball
         */
        drop?: string;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched monsters details. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DataPage_MonsterSchema_"];
        };
      };
    };
  };
  get_monster_monsters__code__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The code of the monster. */
        code: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched monster. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MonsterResponseSchema"];
        };
      };
      /** @description Monster not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_all_resources_resources_get: {
    parameters: {
      query?: {
        /** @description Skill minimum level. */
        min_level?: number;
        /** @description Skill maximum level. */
        max_level?: number;
        /** @description The code of the skill. */
        skill?: "mining" | "woodcutting" | "fishing";
        /**
         * @description Item code of the drop.
         * @example copper_ore
         */
        drop?: string;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched resources details. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DataPage_ResourceSchema_"];
        };
      };
    };
  };
  get_resource_resources__code__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description The code of the resource.
         * @example copper_rocks
         */
        code: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched resource. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResourceResponseSchema"];
        };
      };
      /** @description Resource not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_all_events_events_get: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched events details. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DataPage_ActiveEventSchema_"];
        };
      };
    };
  };
  get_all_ge_items_ge_get: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Fetch Grand Exchange items details. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DataPage_GEItemSchema_"];
        };
      };
    };
  };
  get_ge_item_ge__code__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The code of the item. */
        code: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched Grand Exchange item. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GEItemResponseSchema"];
        };
      };
      /** @description Item not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_all_tasks_tasks_list_get: {
    parameters: {
      query?: {
        /** @description Minimum level. */
        min_level?: number;
        /** @description Maximum level. */
        max_level?: number;
        /** @description The code of the skill. */
        skill?:
          | "mining"
          | "woodcutting"
          | "fishing"
          | "gearcrafting"
          | "weaponcrafting"
          | "jewelrycrafting"
          | "cooking";
        /** @description The type of tasks. */
        type?: "items" | "monsters";
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched tasks details. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DataPage_TaskFullSchema_"];
        };
      };
    };
  };
  get_task_tasks_list__code__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The code of the task. */
        code: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched task. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TaskFullResponseSchema"];
        };
      };
      /** @description Task not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_all_tasks_rewards_tasks_rewards_get: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched tasks rewards details. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DataPage_TasksRewardFullSchema_"];
        };
      };
    };
  };
  get_tasks_reward_tasks_rewards__code__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The code of the tasks reward. */
        code: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched tasks reward. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TasksRewardFullResponseSchema"];
        };
      };
      /** @description Tasks reward not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_all_achievements_achievements_get: {
    parameters: {
      query?: {
        /** @description Type of achievements. */
        type?:
          | "combat_kill"
          | "combat_drop"
          | "combat_level"
          | "gathering"
          | "crafting"
          | "recycling"
          | "task"
          | "other";
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched achievements. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DataPage_BaseAchievementSchema_"];
        };
      };
    };
  };
  get_achievement_achievements__code__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The code of the achievement. */
        code: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched achievement. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseachievementResponseSchema"];
        };
      };
      /** @description achievement not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_leaderboard_leaderboard_get: {
    parameters: {
      query?: {
        /** @description Default sort by combat total XP. */
        sort?:
          | "combat"
          | "woodcutting"
          | "mining"
          | "fishing"
          | "weaponcrafting"
          | "gearcrafting"
          | "jewelrycrafting"
          | "cooking"
          | "achievements_points"
          | "gold";
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched leaderboard. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DataPage_CharacterLeaderboardSchema_"];
        };
      };
    };
  };
  create_account_accounts_create_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddAccountSchema"];
      };
    };
    responses: {
      /** @description Account created successfully. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResponseSchema"];
        };
      };
      /** @description Username already used. */
      456: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Email already used. */
      457: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  generate_token_token_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Token generated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TokenResponseSchema"];
        };
      };
      /** @description Token generation failed. */
      455: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_status__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StatusResponseSchema"];
        };
      };
    };
  };
}
